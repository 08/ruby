p __C__('return INT2FIX(42);')

__END__

require 'benchmark'
@iv = 'iv'
max = 10000000
Benchmark.bm{|bx|
  bx.report{
    v = nil
    max.times{
      v = @iv
    }
  }
  bx.report{
    v = nil
    max.times{
      __C__ %q{
        v = @iv;
      }
    }
  }
}

#C puts("hello world!");

__END__
def cnd d
  a1 = 0.31938153
  a2 = -0.356563782
  a3 = 1.781477937
  a4 = -1.821255978
  a5 = 1.330274429
  rsqrt2pi = 0.3989422804

  k = 1.0 / (1.0 + 0.2316419 * d.abs)

  c = rsqrt2pi * Math.exp(-0.5 * d * d) * (k * (a1 + k * (a2 + k * (a3 + k * (a4 + k * a5)))))

  if (d > 0.0)
    1.0 - c
  else
    c
  end
end

def blackscholes s, x, t, r, v
  sqrtT = Math.sqrt(t)
  d1 = (Math.log(s / x) + (r + 0.5 * v * v) * t) / (v * sqrtT)
  d2 = d1 - v * sqrtT

  cnd_d1 = cnd(d1)
  cnd_d2 = cnd(d2)

  expRT = Math.exp(-1.0 * r * t)

  s * cnd_d1 - x * expRT * cnd_d2
end

def blackscholes_c s, x, t, r, v
  d1 = (Math.log(s / x) + (r + 0.5 * v * v) * t) / (v * sqrtT)
  d2 = d1 - v * sqrtT

  __Cdecl__ %q{
      #include <math.h>
      double cnd_c(double d) {
	  double a1 = 0.31938153;
	  double a2 = -0.356563782;
	  double a3 = 1.781477937;
	  double a4 = -1.821255978;
	  double a5 = 1.330274429;
	  double rsqrt2pi = 0.3989422804;
	  double k = 1.0 / (1.0 + 0.2316419 * fabs(d));
	  double c = rsqrt2pi * exp(-0.5 * d * d) * (k * (a1 + k * (a2 + k * (a3 + k * (a4 + k * a5)))));

	  if (d > 0.0) {
	      return 1.0 - c;
	  }
	  else {
	      return c;
	  }
      }
  }
  
  __C__ %q{
    double cnd_d1 = cnd_c(RFLOAT_VALUE(d1));
    double cnd_d2 = cnd_c(RFLOAT_VALUE(d2));

    double expRT = exp(-1.0 * RFLOAT_VALUE(r) * RFLOAT_VALUE(t));
    return DBL2NUM(RFLOAT_VALUE(s) * cnd_d1 - RFLOAT_VALUE(x) * expRT * cnd_d2);
  }
end

s = 40.0
x = 50.0
t = 0.333
r = 0.08
v = 0.30
max = 1000000

require 'benchmark'

Benchmark.bm{|bx|
  bx.report{
    i = 0
    while i < max
      ret = blackscholes(s, x, t, r, v);
      i += 1
    end
    p ret
  }

  bx.report{
    i = 0
    while i < max
      ret = blackscholes_c(s, x, t, r, v);
      i += 1
    end
    p ret
  }
}

__END__

# from http://www.bagley.org/~doug/shootout/bench/random/random.ruby

$IM = 139968.0
$IA = 3877.0
$IC = 29573.0

def gen_random(max)
  $last = ($last * $IA + $IC) % $IM
  (max * $last) / $IM
end

def gen_random_c(max)
  # $last = ($last * IA + IC) % IM
  # (max * $last) / IM
  __C__ %Q{
    double ia = RFLOAT_VALUE(RGV(IA));
    double ic = RFLOAT_VALUE(RGV(IC));
    double im = RFLOAT_VALUE(RGV(IM));
    double lmax = RFLOAT_VALUE(max);
    double last = RFLOAT_VALUE(RGV(last));
    last = fmod(last * ia + ic, im);
    RGV_SET(last, DBL2NUM(last));
    return DBL2NUM((lmax * last) / im);
  }
end

N = 1000000

require 'benchmark'

Benchmark.bm{|x|
  x.report{
    $last = 42.0
    i=0
    while i<N
      i+=1
      gen_random(100.0)
    end
  }
  x.report{
    $last = 42.0
    i=0
    while i<N
      i+=1
      gen_random_c(100.0)
    end
  }
}
__END__


pr = proc(&__Cb__('rb_p(arg); return Qtrue;'))
p pr.call(1)

__END__
hw = 'hello'
1.times{|i|
  {:a => :b}.each(&__Cb__(%q{
    printf("argc: %d\n", argc);
    rb_p(rb_ary_new3(4, hw, i, arg, blockarg));
  }))
}

__END__

$global_variable = 'global-variable'

class C
  CONST = 'Constant'

  def initialize
    @instance_variable = 'instance-variable'
  end

  def m
    #C rb_p(RIV(instance_variable));
    #C rb_p(RGV(global_variable));
    #C rb_p(RConst(CONST));
    # #C rb_p(RCV(class_variable));
  end
end

C.new.m

__END__

__Cinit__ %q{
  printf("init\n");
}

def m
  __Cdecl__ %q{
    static void
    foo(char *name){
      printf("foo %s\n", name);
    }
  }
  #C foo("bar");
end

m()

#C if (1) {
  p 1
#C } else {
  p 2
#C }

def hello3(name)
  3.times{|i|
    3.times{|j|
      p __C__(%q{
        return rb_ary_new3(3, i, j, name);
      })
    }
  }
end

hello3 'hoge'

__END__

puts 'hello'
#C printf("world\n");

__END__

def hello3(name)
  3.times{|i|
    3.times{|j|
      p __C__(%q{
        i = INT2FIX(FIX2INT(i) * 2);
        return rb_ary_new3(4, self, i, j, name);
      })
      p i
    }
  }
end

hello3 'hoge'

__END__

class Fixnum
  def times2
    i = 0
    #C  for (; i<self; i = INT2FIX(FIX2INT(i) + 1)) {
      yield i
    #C  }
  end
end

__C__ %q{
  
}

10.times{|i| p i}
10.times2{|i| p i}

__END__

class C
  __CDEF__ "foo(v1, v2)", %q{
    return rb_p(rb_ary_new3(2, v1, v2));
  }
end

C.new.foo(1, 2)

__END__

class Fixnum
  def times2
    __C__ %q{
      int i;
      int max = FIX2INT(self);

      for (i=0; i<max; i++) {
        rb_yield(INT2FIX(i));
      }
    }
  end
end

10.times{|i| p i}
10.times2{|i| p i}

__END__

def hello3(name)
  3.times{|i|
    3.times{|j|
      p __C__(%q{
        int x = i;
        i = INT2FIX(FIX2INT(i) * 2);
        return rb_ary_new3(4, self, i, j, name);
      })
      p i
    }
  }
end

hello3 'hoge'

__END__


__C0__ %q{
  static VALUE hoge(VALUE self)
  {
    printf("hoge\n");
    return self;
  }
}

class C
  __C__ %q{
    rb_define_method(self, "hoge", hoge, 0);
  }
end

p C.new.hoge

__END__

class Fixnum
  def times2
    __C__ %q{
      int i;
      int max = FIX2INT(SELF);

      for (i=0; i<max; i++) {
        rb_yield(INT2FIX(i));
      }
    }
  end
end

10.times{|i| p i}
10.times2{|i| p i}

__END__

def hello3(name)
  3.times{|i|
    3.times{|j|
      p __C__(%q{
        return rb_ary_new3(3, i, j, name);
      })
    }
  }
end

hello3 'hoge'

__END__

class Fixnum
  def times
    __C__ %q{
      int i;
      int max = FIX2INT(SELF());

      for (i=0; i<max; i++) {
        YIELD();
      }
    }
  end
end

begin
  foo = "foo message"
  __C__ %q{
    int i;
    int max = FIX2INT(SELF());

    for (i=0; i<max; i++)
    rb_raise(rb_eRuntimeError, RSTRING_PTR(RV(foo)));
  }
rescue => e
  p e
end

__END__

# -*- ruby -*-

__C0__ %q{
  #include <stdio.h>
}

def hello
  __C__ %q{
    printf("Hello World!\n");
  }
end

def hello2(name)
  len = name.length
  __C__ %q{
    char *cstr = RSTRING_PTR(name);
    printf("Hello %s\n", cstr);
    return INT2FIX(RSTRING_LEN(RV(name)));
  }
end

def hello3(name)
  3.times{|i|
    3.times{|j|
      __C__ %q{
        rb_p(rb_ary_new3(3, RV(i), RV(j), RV(name)));
      }
    }
  }
end

p hello
p hello2('foo')
p hello3('bar')
